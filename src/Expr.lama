-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
    case eval (c, e) of
      [c, v] -> [c, v : vals]
    esac
  },
    [c, {}],
    exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
      Assn    (eL, eR)     ->
        case evalList(c, {eL, eR}) of
          [[s1, w1], {Ref(x), Val(e)}] -> [[s1 <- [x, e], w1], Val(e)]
        esac
    | Seq     (e1, e2)     -> eval(eval(c, e1).fst, e2)
    | Skip                 -> [c, Void]
    | Read    (strr)       -> case readWorld(w) of [z1, w1]            -> [[s <- [strr, z1], w1], Void] esac
    | Write   (e)          -> case eval(c, e)   of [[s1, w1], Val(x)] -> [[s1, writeWorld(x, w1)], Void] esac
    | If      (e1, e2, e3) ->
        case eval(c, e1) of
            [c1, Val(0)] -> eval(c1, e3)
          | [c1, Val(_)] -> eval(c1, e2)
        esac
    | While   (e1, e2)     ->
        case eval(c, e1) of
            [c1, Val(0)] -> [c1, Void]
          | [c1, Val(_)] -> eval(eval(c1, e2).fst, expr)
        esac
    | DoWhile (e1, e2)     ->
        case eval(eval(c, e1).fst, e2) of
          [c1, Val(0)] -> [c1, Void]
        | [c1, Val(_)] -> eval(c1, While (e2, e1))
        esac
    | Var     (strr)       -> [c, Val( s(strr) )]
    | Ref     (strr)       -> [c, Ref( strr )]
    | Const   (n)          -> [c, Val( n )]
    | Binop   (op, eL, eR) ->
      case evalList(c, {eL, eR}) of
        [c1, { Val(lhs), Val(rhs) }] -> [c1, Val(evalOp(op, lhs, rhs))]
      esac
    | Ignore  (expr)       -> [eval(c, expr).fst, Void]
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
