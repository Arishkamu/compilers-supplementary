-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
      READ      -> sprintf ("READ")
    | WRITE     -> sprintf ("WRITE")
    | BINOP (s) -> sprintf ("BINOP %s", s)
    | LD    (x) -> sprintf ("LD %s", x)
    | ST    (x) -> sprintf ("ST %s", x)
    | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
      {} -> c
    | i:ns ->
      case c of
          [stack, s, w] -> case i of
              READ      -> case readWorld(w) of [z, w1] -> eval ([z:stack, s, w1], ns) esac
            | WRITE     -> case stack of z:stack1 -> eval ([stack1, s, writeWorld(z, w)], ns) esac
            | BINOP (op) -> case stack of y:x:stack1 -> eval ([(evalOp(op, x, y)):stack1, s, w], ns) esac
            | LD    (x) -> eval([s(x):stack, s, w], ns)
            | ST    (strr) -> case stack of z:stack1 -> eval ([stack1, s <- [strr, z], w], ns) esac
            | CONST (n) -> eval ([n:stack, s, w], ns)
          esac
        | _ -> failure ("no SM-comfiguration")
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var (x) -> {LD (x)}
    | Const (n) -> {CONST (n)}
    | Binop (op, exprL, exprR) -> compileExpr(exprL) +++ compileExpr(exprR) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
      Assn (strr, expr) -> compileExpr(expr) +++ {ST (strr)}
    | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
    | Read (strr) -> {READ, ST (strr)}
    | Write (expr) -> compileExpr(expr) +++ {WRITE}
    | Skip -> {}
  esac
}