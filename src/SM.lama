-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of
      {} -> c
    | i:ns ->
      case c of
          [stack, s, w]  ->  case i of
              READ       ->  case readWorld(w) of [z, w1] -> eval (env, [z:stack, s, w1], ns) esac
            | WRITE      ->  case stack of z:stack1 -> eval (env, [stack1, s, writeWorld(z, w)], ns) esac
            | BINOP (op) -> case stack of y:x:stack1 -> eval (env, [(evalOp(op, x, y)):stack1, s, w], ns) esac
            | LD    (x)    -> eval (env, [s(x):stack, s, w], ns)
            | LDA   (x)    -> eval (env, [   x:stack, s, w], ns)
            | ST    (strr) -> case stack of z:stack1 -> eval (env, [stack1, s <- [strr, z], w], ns) esac
            | STI          -> case stack of y:z:stack1 -> eval (env, [y:stack1, s <- [z, y], w], ns) esac
            | CONST (n)    -> eval (env, [n:stack, s, w], ns)
            | LABEL (l)    -> eval (env, c, ns)
            | JMP   (l)    -> eval(env, c, fromLabel(env, l))
            | CJMP  ("z", l) ->
              case stack of
                0:stack1 -> eval(env, [stack1, s, w], fromLabel(env, l))
              | _:stack1 -> eval(env, [stack1, s, w], ns)
              esac
            | CJMP  ("nz", l) ->
              case stack of
                0:stack1 -> eval(env, [stack1, s, w], ns)
              | _:stack1 -> eval(env, [stack1, s, w], fromLabel(env, l))
              esac
            | DROP         -> case stack of z:stack1 -> eval (env, [stack1, s, w], ns) esac
          esac
        | _ -> failure ("no SM-comfiguration")
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)         -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Binop (op, l, r) ->
      case env.genLabels(2) of
        [rLab, opLab, env] ->
          case compile(rLab, env, l) of
            [rLabUsed, env, lCode] ->
              case compile(opLab, env, r) of
                [opLabUsed, env, rCode] -> [false, env, lCode <+> label(rLab, rLabUsed) <+>
                  rCode <+> label(opLab, opLabUsed) <+ BINOP(op)]
              esac
          esac
      esac
    | Write (e) ->
      case env.genLabel of
        [lab, env] ->
          case compile (lab, env, e) of
            [labUsed, env, sCode] -> [false, env, sCode <+> label (lab, labUsed) <+ WRITE]
          esac
      esac
    | Assn(x, e) ->
      case env.genLabels(2) of
        [l1, l2, env] ->
          case compile(l1, env, x) of
            [used1, env, code1] ->
              case compile(l2, env, e) of
                [used2, env, code2] ->
                  [false, env, code1 <+> label(l1, used1) <+> code2 <+> label(l2, used2) <+ STI]
              esac
          esac
      esac
    | Assn  (x, e) ->
      case env.genLabel of
        [eLab, env] ->
          case env.genLabel of
            [opLab, env] ->
              case compile (eLab, env, x) of
                [eLabUsed, env, eCode] ->
                  case compile (opLab, env, e) of
                    [opLabUsed, env, exprCode] -> [false, env, eCode <+> label (eLab, eLabUsed)
                      <+> exprCode <+> label (opLab, opLabUsed) <+ STI]
                  esac
              esac
          esac
      esac

      | Seq(s1, s2) ->
      case env.genLabel of
        [s2Lab, env] ->
          case compile (s2Lab, env, s1) of
            [s2LabUsed, env, s1Code] ->
              case compile (lab, env, s2) of
                [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
              esac
          esac
      esac
    | If   (e, s1, s2) ->
      case env.genLabels(2) of
        [cLab, elsLab, env] ->
          case compile(cLab, env, e) of
            [cUsed, env, condCode] ->
              case compile(lab, env, s1) of
                [_, env, s1Cond] ->
                  case compile(lab, env, s2) of
                  [_, env, s2Code] -> [true, env, condCode <+> label(cLab, cUsed) <+ CJMP("z", elsLab)
                    <+> s1Cond <+ JMP(lab) <+ LABEL(elsLab) <+> s2Code]
                  esac
              esac
          esac
      esac
      | While (expr, stmt) ->
        case env.genLabels(3) of
          [sLab, eLab, breakLab, env] ->
            case compile(eLab, env, stmt) of
              [_, env, sCode] ->
                case compile(breakLab, env, expr) of
                  [breakLabUsed, env, eCode] ->
                    [false, env, emptyBuffer() <+ JMP(eLab) <+ LABEL(sLab) <+> sCode <+ LABEL(eLab)
                        <+> eCode <+> label(breakLab, breakLabUsed) <+ CJMP("nz", sLab)]
                esac
            esac
        esac
    | DoWhile (s, e) ->
      case env.genLabel of
        [sLab, env] ->
          case compile(sLab, env, s) of
            [labUsed, env, sCode] -> [labUsed, env, emptyBuffer() <+ LABEL(sLab) <+> sCode <+ CJMP("nz", sLab)]
          esac
      esac
    | Ignore (e) ->
      case env.genLabel of
        [sLab, env] ->
          case compile(sLab, env, e) of
            [labUsed, env, sCode] -> [false, env, sCode <+> label(sLab, labUsed) <+ DROP]
          esac
      esac
    | _              -> failure ("compileSM not implemented\n")
  esac
}

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
